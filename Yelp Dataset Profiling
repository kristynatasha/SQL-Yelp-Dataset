Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	
SQL code used:
SELECT *
FROM business;

2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2463
iv. Attribute = 1115
v. Review = 8090
vi. Checkin = 493
vii. Photo = 6493
viii. Tip = 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	
SQL code used:
SELECT COUNT(DISTINCT business_id) AS TotalDistinctRecords
FROM category;


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	SQL code used to arrive at answer:
SELECT *
FROM User
WHERE (
  SELECT COUNT(*) 
  FROM User
  WHERE id IS NULL OR 
        name IS NULL OR 
        review_count IS NULL OR
        yelping_since IS NULL OR
        useful IS NULL OR 
        funny IS NULL OR
        cool IS NULL OR
        fans IS NULL OR 
        average_stars IS NULL OR
        compliment_hot IS NULL OR        
        compliment_more IS NULL OR
        compliment_profile IS NULL OR 
        compliment_cute IS NULL OR
        compliment_list IS NULL OR  
        compliment_note IS NULL OR        
        compliment_plain IS NULL OR
        compliment_cool IS NULL OR 
        compliment_funny IS NULL OR
        compliment_writer IS NULL OR  
        compliment_photos IS NULL  
) > 0;
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
		min:1		max:5		avg:3.7082
	
	ii. Table: Business, Column: Stars
		min:1		max:5		avg:3.6549
	
	iii. Table: Tip, Column: Likes
		min:0		max:2		avg:0.0144
	
	iv. Table: Checkin, Column: Count
		min:1		max:53		avg:1.9414
		
	v. Table: User, Column: Review_count
		min:0		max:2000	avg:24.2995
		
SQL code used:
SELECT
  MIN(Stars) AS Min_Stars,
  MAX(Stars) AS Max_Stars,
  AVG(Stars) AS Avg_Stars
FROM Review;


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city, SUM(review_count) AS total_reviews
FROM business
GROUP BY city
ORDER BY total_reviews DESC;

	Copy and Paste the Result Below:
+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix         |         34503 |
| Toronto         |         24113 |
| Scottsdale      |         20614 |
| Charlotte       |         12523 |
| Henderson       |         10871 |
| Tempe           |         10504 |
| Pittsburgh      |          9798 |
| Montréal        |          9448 |
| Chandler        |          8112 |
| Mesa            |          6875 |
| Gilbert         |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga     |          3814 |
| Edinburgh       |          2792 |
| Peoria          |          2624 |
| North Las Vegas |          2438 |
| Markham         |          2352 |
| Champaign       |          2029 |
| Stuttgart       |          1849 |
| Surprise        |          1520 |
| Lakewood        |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon
SQL code used to arrive at answer:

SELECT stars as 'star rating', COUNT(*) AS count
FROM Business
WHERE city = 'Avon'
GROUP BY stars
ORDER BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star rating | count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood
SQL code used to arrive at answer:

SELECT stars as 'star rating', COUNT(*) AS count
FROM Business
WHERE city = 'Beachwood'
GROUP BY stars
ORDER BY stars;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):
+-------------+-------+
| star rating | count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT id, name, review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;	
		
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+
		

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

The coefficient correlation shows a very small value (8.3033897859e-12) that suggests an extremely weak/negligible linear relatiosnship between 'review_count' and 'fans' attribute in the 'user' table. This means there is no strong indication that users who post more reviews have more fans or vice versa in this dataset.

SQL code used:

Note: The CORR() function is not available in the SQLite (and it also doesn't have a built-in SQRT function), so I calculate the correlation coefficient manually using the Pearlson correlation formula:
r = (n * Σ(Xi * Yi) - Σ(Xi) * Σ(Yi)) / sqrt((n * Σ(Xi^2) - Σ(Xi)^2) * (n * Σ(Yi^2) - Σ(Yi)^2))

SELECT 
  (COUNT(*) * SUM(review_count * fans) - SUM(review_count) * SUM(fans)) /
  (1.0 * COUNT(*) * SUM(review_count * review_count) - SUM(review_count) * SUM(review_count)) AS numerator,
  (1.0 * COUNT(*) * SUM(fans * fans) - SUM(fans) * SUM(fans)) AS denominator,
  COUNT(*) AS num_rows,
  (COUNT(*) * SUM(review_count * fans) - SUM(review_count) * SUM(fans)) /
  (1.0 * COUNT(*) * SUM(review_count * review_count) - SUM(review_count) * SUM(review_count)) /
  (1.0 * COUNT(*) * SUM(fans * fans) - SUM(fans) * SUM(fans)) AS correlation_coefficient
FROM user;

+-----------------+---------------+----------+-------------------------+
|       numerator |   denominator | num_rows | correlation_coefficient |
+-----------------+---------------+----------+-------------------------+
| 0.0936697860941 | 11280909184.0 |    10000 |        8.3033897859e-12 |
+-----------------+---------------+----------+-------------------------+

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more reviews with the word "love".
+------------------+------------------+
| num_love_reviews | num_hate_reviews |
+------------------+------------------+
|             1780 |              232 |
+------------------+------------------+

	SQL code used to arrive at answer:
SELECT
  COUNT(*) AS num_love_reviews,
  (SELECT COUNT(*) FROM review WHERE text LIKE '%hate%') AS num_hate_reviews
FROM review
WHERE text LIKE '%love%';

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
SELECT id, name, fans
FROM user
ORDER BY fans DESC
LIMIT 10;
	
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
